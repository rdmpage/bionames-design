
<div id="pubHistogram" class="chart"></div>
<div id="pubList"></div>
    
<script type="text/javascript" charset="utf-8">
// These globals are just for ease of debugging
// TODO make them local inside d3.json closure in production
var pubs, publication_list;
d3.json("data/rattus_publications.json", function(publications){
    // stick publications into a global variable to make debugging easier
    pubs = publications;
    
    // Denormalize Rod's handy dandy faceting into a flat list!
    publication_list = [];
    for( year in publications.years ) {
        var pubs_by_year = publications.years[year];
        
        for( id in pubs_by_year ) {
            var pub = pubs_by_year[id];
            
            // A little type coercion
            pub.year = +pub.year; 
            publication_list.push( pub );
        }
    }
    
    // Crossfilter, dimensions, and groups
    /* var */ publication = crossfilter(publication_list),
        year = publication.dimension(function(d){ return d.year; }),
        years = year.group();
    
    var yearsExtent = d3.extent( years.all(), function(d){ return d.key; })
    
    // Nest operator for grouping the list by decade
    var nestByDecade = d3.nest()
        .key(function(d){ return Math.floor(d.year/10) * 10; });
        
    // Charts
    var histograms = [
        filterWidgets.histogram()
            .dimension(year)
            .group(years)
            .round( Math.floor )
            .xScale( d3.scale.linear()
                .domain([ yearsExtent[0], yearsExtent[1]+1])
                .rangeRound([0, 400])
                .nice())
    ];
    
    var lists = [
        filterWidgets.publicationList().dimension(year).nest(nestByDecade)
    ];
    
    // Given an array of histogram definitions, bind them to
    // charts in the DOM, which we assume are in the same order
    var chart = d3.selectAll(".chart")
        .data(histograms)
        .each(function(c){ c.on("brush", renderAll).on("brushend", renderAll); })
    
    var list = d3.selectAll("#pubList")
        .data(lists);
    
    function renderAll(){
        chart.each(render);
        list.each(render);
    }
    
    function render( method ) {
        d3.select(this).call(method);
    }
    
    renderAll();
});  
</script>